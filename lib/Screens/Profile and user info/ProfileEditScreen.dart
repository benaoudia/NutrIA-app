import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:nutria/Blocs/profile_blocs/profileBloc.dart';

const Color buttons_blue = Color.fromARGB(255, 103, 138, 150);

class ProfileEditScreen extends StatelessWidget {
  const ProfileEditScreen({super.key});

  // Dropdown options
  static const genderOptions = ['Male', 'Female'];
  static const activityOptions = [
    'Sedentary',
    'Lightly active',
    'Moderately active',
    'Very active',
    'Extra active',
  ];
  static const goalOptions = ['Lose weight', 'Maintain weight', 'Gain weight'];
  static const List<String> countryOptions = [
    'ğŸ‡¦ğŸ‡« Afghanistan',
    'ğŸ‡¦ğŸ‡± Albania',
    'ğŸ‡©ğŸ‡¿ Algeria',
    'ğŸ‡¦ğŸ‡© Andorra',
    'ğŸ‡¦ğŸ‡´ Angola',
    'ğŸ‡¦ğŸ‡¬ Antigua & Barbuda',
    'ğŸ‡¦ğŸ‡· Argentina',
    'ğŸ‡¦ğŸ‡² Armenia',
    'ğŸ‡¦ğŸ‡º Australia',
    'ğŸ‡¦ğŸ‡¹ Austria',
    'ğŸ‡¦ğŸ‡¿ Azerbaijan',
    'ğŸ‡§ğŸ‡¸ Bahamas',
    'ğŸ‡§ğŸ‡­ Bahrain',
    'ğŸ‡§ğŸ‡© Bangladesh',
    'ğŸ‡§ğŸ‡§ Barbados',
    'ğŸ‡§ğŸ‡¾ Belarus',
    'ğŸ‡§ğŸ‡ª Belgium',
    'ğŸ‡§ğŸ‡¿ Belize',
    'ğŸ‡§ğŸ‡¯ Benin',
    'ğŸ‡§ğŸ‡¹ Bhutan',
    'ğŸ‡§ğŸ‡´ Bolivia',
    'ğŸ‡§ğŸ‡¦ Bosnia & Herzegovina',
    'ğŸ‡§ğŸ‡¼ Botswana',
    'ğŸ‡§ğŸ‡· Brazil',
    'ğŸ‡§ğŸ‡³ Brunei',
    'ğŸ‡§ğŸ‡¬ Bulgaria',
    'ğŸ‡§ğŸ‡« Burkina Faso',
    'ğŸ‡§ğŸ‡® Burundi',
    'ğŸ‡¨ğŸ‡» Cabo Verde',
    'ğŸ‡°ğŸ‡­ Cambodia',
    'ğŸ‡¨ğŸ‡² Cameroon',
    'ğŸ‡¨ğŸ‡¦ Canada',
    'ğŸ‡¨ğŸ‡« Central African Republic',
    'ğŸ‡¹ğŸ‡© Chad',
    'ğŸ‡¨ğŸ‡± Chile',
    'ğŸ‡¨ğŸ‡³ China',
    'ğŸ‡¨ğŸ‡´ Colombia',
    'ğŸ‡°ğŸ‡² Comoros',
    'ğŸ‡¨ğŸ‡¬ Congo - Brazzaville',
    'ğŸ‡¨ğŸ‡© Congo - Kinshasa',
    'ğŸ‡¨ğŸ‡· Costa Rica',
    'ğŸ‡­ğŸ‡· Croatia',
    'ğŸ‡¨ğŸ‡º Cuba',
    'ğŸ‡¨ğŸ‡¾ Cyprus',
    'ğŸ‡¨ğŸ‡¿ Czechia',
    'ğŸ‡©ğŸ‡° Denmark',
    'ğŸ‡©ğŸ‡¯ Djibouti',
    'ğŸ‡©ğŸ‡² Dominica',
    'ğŸ‡©ğŸ‡´ Dominican Republic',
    'ğŸ‡ªğŸ‡¨ Ecuador',
    'ğŸ‡ªğŸ‡¬ Egypt',
    'ğŸ‡¸ğŸ‡» El Salvador',
    'ğŸ‡¬ğŸ‡¶ Equatorial Guinea',
    'ğŸ‡ªğŸ‡· Eritrea',
    'ğŸ‡ªğŸ‡ª Estonia',
    'ğŸ‡¸ğŸ‡¿ Eswatini',
    'ğŸ‡ªğŸ‡¹ Ethiopia',
    'ğŸ‡«ğŸ‡¯ Fiji',
    'ğŸ‡«ğŸ‡® Finland',
    'ğŸ‡«ğŸ‡· France',
    'ğŸ‡¬ğŸ‡¦ Gabon',
    'ğŸ‡¬ğŸ‡² Gambia',
    'ğŸ‡¬ğŸ‡ª Georgia',
    'ğŸ‡©ğŸ‡ª Germany',
    'ğŸ‡¬ğŸ‡­ Ghana',
    'ğŸ‡¬ğŸ‡· Greece',
    'ğŸ‡¬ğŸ‡© Grenada',
    'ğŸ‡¬ğŸ‡¹ Guatemala',
    'ğŸ‡¬ğŸ‡³ Guinea',
    'ğŸ‡¬ğŸ‡¼ Guinea-Bissau',
    'ğŸ‡¬ğŸ‡¾ Guyana',
    'ğŸ‡­ğŸ‡¹ Haiti',
    'ğŸ‡­ğŸ‡³ Honduras',
    'ğŸ‡­ğŸ‡º Hungary',
    'ğŸ‡®ğŸ‡¸ Iceland',
    'ğŸ‡®ğŸ‡³ India',
    'ğŸ‡®ğŸ‡© Indonesia',
    'ğŸ‡®ğŸ‡· Iran',
    'ğŸ‡®ğŸ‡¶ Iraq',
    'ğŸ‡®ğŸ‡ª Ireland',
    'ğŸ‡®ğŸ‡¹ Italy',
    'ğŸ‡¯ğŸ‡² Jamaica',
    'ğŸ‡¯ğŸ‡µ Japan',
    'ğŸ‡¯ğŸ‡´ Jordan',
    'ğŸ‡°ğŸ‡¿ Kazakhstan',
    'ğŸ‡°ğŸ‡ª Kenya',
    'ğŸ‡°ğŸ‡® Kiribati',
    'ğŸ‡°ğŸ‡¼ Kuwait',
    'ğŸ‡°ğŸ‡¬ Kyrgyzstan',
    'ğŸ‡±ğŸ‡¦ Laos',
    'ğŸ‡±ğŸ‡» Latvia',
    'ğŸ‡±ğŸ‡§ Lebanon',
    'ğŸ‡±ğŸ‡¸ Lesotho',
    'ğŸ‡±ğŸ‡· Liberia',
    'ğŸ‡±ğŸ‡¾ Libya',
    'ğŸ‡±ğŸ‡® Liechtenstein',
    'ğŸ‡±ğŸ‡¹ Lithuania',
    'ğŸ‡±ğŸ‡º Luxembourg',
    'ğŸ‡²ğŸ‡¬ Madagascar',
    'ğŸ‡²ğŸ‡¼ Malawi',
    'ğŸ‡²ğŸ‡¾ Malaysia',
    'ğŸ‡²ğŸ‡» Maldives',
    'ğŸ‡²ğŸ‡± Mali',
    'ğŸ‡²ğŸ‡¹ Malta',
    'ğŸ‡²ğŸ‡­ Marshall Islands',
    'ğŸ‡²ğŸ‡· Mauritania',
    'ğŸ‡²ğŸ‡º Mauritius',
    'ğŸ‡²ğŸ‡½ Mexico',
    'ğŸ‡«ğŸ‡² Micronesia',
    'ğŸ‡²ğŸ‡© Moldova',
    'ğŸ‡²ğŸ‡¨ Monaco',
    'ğŸ‡²ğŸ‡³ Mongolia',
    'ğŸ‡²ğŸ‡ª Montenegro',
    'ğŸ‡²ğŸ‡¦ Morocco',
    'ğŸ‡²ğŸ‡¿ Mozambique',
    'ğŸ‡²ğŸ‡² Myanmar',
    'ğŸ‡³ğŸ‡¦ Namibia',
    'ğŸ‡³ğŸ‡· Nauru',
    'ğŸ‡³ğŸ‡µ Nepal',
    'ğŸ‡³ğŸ‡± Netherlands',
    'ğŸ‡³ğŸ‡¿ New Zealand',
    'ğŸ‡³ğŸ‡® Nicaragua',
    'ğŸ‡³ğŸ‡ª Niger',
    'ğŸ‡³ğŸ‡¬ Nigeria',
    'ğŸ‡°ğŸ‡µ North Korea',
    'ğŸ‡²ğŸ‡° North Macedonia',
    'ğŸ‡³ğŸ‡´ Norway',
    'ğŸ‡´ğŸ‡² Oman',
    'ğŸ‡µğŸ‡° Pakistan',
    'ğŸ‡µğŸ‡¼ Palau',
    'ğŸ‡µğŸ‡¸ Palestine',
    'ğŸ‡µğŸ‡¦ Panama',
    'ğŸ‡µğŸ‡¬ Papua New Guinea',
    'ğŸ‡µğŸ‡¾ Paraguay',
    'ğŸ‡µğŸ‡ª Peru',
    'ğŸ‡µğŸ‡­ Philippines',
    'ğŸ‡µğŸ‡± Poland',
    'ğŸ‡µğŸ‡¹ Portugal',
    'ğŸ‡¶ğŸ‡¦ Qatar',
    'ğŸ‡·ğŸ‡´ Romania',
    'ğŸ‡·ğŸ‡º Russia',
    'ğŸ‡·ğŸ‡¼ Rwanda',
    'ğŸ‡°ğŸ‡³ Saint Kitts & Nevis',
    'ğŸ‡±ğŸ‡¨ Saint Lucia',
    'ğŸ‡»ğŸ‡¨ Saint Vincent & Grenadines',
    'ğŸ‡¼ğŸ‡¸ Samoa',
    'ğŸ‡¸ğŸ‡² San Marino',
    'ğŸ‡¸ğŸ‡¹ Sao Tome & Principe',
    'ğŸ‡¸ğŸ‡¦ Saudi Arabia',
    'ğŸ‡¸ğŸ‡³ Senegal',
    'ğŸ‡·ğŸ‡¸ Serbia',
    'ğŸ‡¸ğŸ‡¨ Seychelles',
    'ğŸ‡¸ğŸ‡± Sierra Leone',
    'ğŸ‡¸ğŸ‡¬ Singapore',
    'ğŸ‡¸ğŸ‡° Slovakia',
    'ğŸ‡¸ğŸ‡® Slovenia',
    'ğŸ‡¸ğŸ‡§ Solomon Islands',
    'ğŸ‡¸ğŸ‡´ Somalia',
    'ğŸ‡¿ğŸ‡¦ South Africa',
    'ğŸ‡°ğŸ‡· South Korea',
    'ğŸ‡¸ğŸ‡¸ South Sudan',
    'ğŸ‡ªğŸ‡¸ Spain',
    'ğŸ‡±ğŸ‡° Sri Lanka',
    'ğŸ‡¸ğŸ‡© Sudan',
    'ğŸ‡¸ğŸ‡· Suriname',
    'ğŸ‡¸ğŸ‡ª Sweden',
    'ğŸ‡¨ğŸ‡­ Switzerland',
    'ğŸ‡¸ğŸ‡¾ Syria',
    'ğŸ‡¹ğŸ‡¼ Taiwan',
    'ğŸ‡¹ğŸ‡¯ Tajikistan',
    'ğŸ‡¹ğŸ‡¿ Tanzania',
    'ğŸ‡¹ğŸ‡­ Thailand',
    'ğŸ‡¹ğŸ‡± Timor-Leste',
    'ğŸ‡¹ğŸ‡¬ Togo',
    'ğŸ‡¹ğŸ‡´ Tonga',
    'ğŸ‡¹ğŸ‡¹ Trinidad & Tobago',
    'ğŸ‡¹ğŸ‡³ Tunisia',
    'ğŸ‡¹ğŸ‡· Turkey',
    'ğŸ‡¹ğŸ‡² Turkmenistan',
    'ğŸ‡¹ğŸ‡» Tuvalu',
    'ğŸ‡ºğŸ‡¬ Uganda',
    'ğŸ‡ºğŸ‡¦ Ukraine',
    'ğŸ‡¦ğŸ‡ª United Arab Emirates',
    'ğŸ‡¬ğŸ‡§ United Kingdom',
    'ğŸ‡ºğŸ‡¸ United States',
    'ğŸ‡ºğŸ‡¾ Uruguay',
    'ğŸ‡ºğŸ‡¿ Uzbekistan',
    'ğŸ‡»ğŸ‡º Vanuatu',
    'ğŸ‡»ğŸ‡¦ Vatican City',
    'ğŸ‡»ğŸ‡ª Venezuela',
    'ğŸ‡»ğŸ‡³ Vietnam',
    'ğŸ‡¾ğŸ‡ª Yemen',
    'ğŸ‡¿ğŸ‡² Zambia',
    'ğŸ‡¿ğŸ‡¼ Zimbabwe',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: BlocBuilder<PersonalInfoCubit, PersonalInfoState>(
        builder: (context, state) {
          if (state is! PersonalInfoLoaded) {
            return const Center(child: CircularProgressIndicator());
          }

          return Stack(
            children: [
              // Header background
              Container(
                height: 120,
                decoration: const BoxDecoration(
                  color: buttons_blue,
                  borderRadius: BorderRadius.only(
                    bottomLeft: Radius.circular(32),
                    bottomRight: Radius.circular(32),
                  ),
                ),
                child: SafeArea(
                  child: Padding(
                    padding: const EdgeInsets.symmetric(
                        horizontal: 24.0, vertical: 16.0),
                    child: Row(
                      crossAxisAlignment: CrossAxisAlignment.center,
                      children: [
                        GestureDetector(
                          onTap: () => Navigator.pop(context),
                          child: const Row(
                            children: [
                              Icon(Icons.arrow_back_ios_new,
                                  color: Colors.white, size: 24),
                              SizedBox(width: 4),
                              Text('Back',
                                  style: TextStyle(
                                      color: Colors.white,
                                      fontSize: 18,
                                      fontWeight: FontWeight.w500)),
                            ],
                          ),
                        ),
                        const SizedBox(width: 16),
                        const Text(
                          'Edit Profile',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 24,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
              // Edit form
              Padding(
                padding: const EdgeInsets.only(top: 140),
                child: SingleChildScrollView(
                  child: Container(
                    margin: const EdgeInsets.symmetric(horizontal: 20),
                    padding: const EdgeInsets.all(24),
                    decoration: BoxDecoration(
                      color: Colors.white,
                      borderRadius: BorderRadius.circular(32),
                      boxShadow: const [
                        BoxShadow(
                          color: Colors.black12,
                          blurRadius: 16,
                          offset: Offset(0, 8),
                        ),
                      ],
                    ),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.stretch,
                      children: [
                        _buildTextField(
                          label: 'Name',
                          value: state.name,
                          icon: Icons.person,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateName(value),
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          label: 'Email',
                          value: state.email,
                          icon: Icons.email,
                          keyboardType: TextInputType.emailAddress,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateEmail(value),
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          label: 'Phone',
                          value: state.phone,
                          icon: Icons.phone,
                          keyboardType: TextInputType.phone,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updatePhone(value),
                        ),
                        const SizedBox(height: 16),
                        _buildDropdownField(
                          label: 'Country',
                          value: state.country,
                          options: countryOptions,
                          icon: Icons.flag,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateCountry(value),
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          label: 'Height (cm)',
                          value: state.height.toString(),
                          icon: Icons.height,
                          keyboardType: TextInputType.number,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateHeight(int.tryParse(value) ?? 0),
                        ),
                        const SizedBox(height: 16),
                        _buildTextField(
                          label: 'Weight (kg)',
                          value: state.weight.toString(),
                          icon: Icons.monitor_weight,
                          keyboardType: TextInputType.number,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateWeight(int.tryParse(value) ?? 0),
                        ),
                        const SizedBox(height: 16),
                        _buildDropdownField(
                          label: 'Gender',
                          value: state.gender,
                          options: genderOptions,
                          icon: Icons.wc,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateGender(value),
                        ),
                        const SizedBox(height: 16),
                        _buildDropdownField(
                          label: 'Activity Level',
                          value: state.activityLevel,
                          options: activityOptions,
                          icon: Icons.directions_run,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateActivityLevel(value),
                        ),
                        const SizedBox(height: 16),
                        _buildDropdownField(
                          label: 'Goal',
                          value: state.goal,
                          options: goalOptions,
                          icon: Icons.flag_circle,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateGoal(value),
                        ),
                        const SizedBox(height: 16),
                        _buildDateField(
                          context: context,
                          label: 'Birthdate',
                          value: state.birthdate,
                          icon: Icons.cake,
                          onChanged: (value) => context
                              .read<PersonalInfoCubit>()
                              .updateBirthdate(value),
                        ),
                        const SizedBox(height: 24),
                        ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: buttons_blue,
                            padding: const EdgeInsets.symmetric(vertical: 16),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(12),
                            ),
                          ),
                          onPressed: () {
                            context.read<PersonalInfoCubit>().submitForm();
                            Navigator.pop(context);
                          },
                          child: const Text(
                            'Save Changes',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            ],
          );
        },
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required String value,
    required IconData icon,
    required Function(String) onChanged,
    TextInputType? keyboardType,
  }) {
    return TextFormField(
      initialValue: value,
      keyboardType: keyboardType,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: buttons_blue),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: buttons_blue, width: 2),
        ),
        filled: true,
        fillColor: Colors.white,
        labelStyle: TextStyle(color: Colors.grey[700]),
      ),
      onChanged: onChanged,
    );
  }

  Widget _buildDropdownField({
    required String label,
    required String value,
    required List<String> options,
    required IconData icon,
    required Function(String) onChanged,
  }) {
    return DropdownButtonFormField<String>(
      value: options.contains(value) ? value : null,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: buttons_blue),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: buttons_blue, width: 2),
        ),
        filled: true,
        fillColor: Colors.white,
        labelStyle: TextStyle(color: Colors.grey[700]),
        contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      ),
      dropdownColor: Colors.white,
      iconEnabledColor: buttons_blue,
      isExpanded: true,
      items: options
          .map((e) => DropdownMenuItem(
                value: e,
                child: Text(
                  e,
                  overflow: TextOverflow.ellipsis,
                  style: const TextStyle(fontSize: 14),
                ),
              ))
          .toList(),
      onChanged: (val) {
        if (val != null) onChanged(val);
      },
    );
  }

  Widget _buildDateField({
    required BuildContext context,
    required String label,
    required DateTime value,
    required IconData icon,
    required Function(DateTime) onChanged,
  }) {
    final controller =
        TextEditingController(text: value.toString().split(' ')[0]);
    return TextFormField(
      controller: controller,
      readOnly: true,
      decoration: InputDecoration(
        labelText: label,
        prefixIcon: Icon(icon, color: buttons_blue),
        border: OutlineInputBorder(borderRadius: BorderRadius.circular(12)),
        focusedBorder: OutlineInputBorder(
          borderRadius: BorderRadius.circular(12),
          borderSide: const BorderSide(color: buttons_blue, width: 2),
        ),
        filled: true,
        fillColor: Colors.white,
        labelStyle: TextStyle(color: Colors.grey[700]),
      ),
      onTap: () async {
        DateTime? picked = await showDatePicker(
          context: context,
          initialDate: value,
          firstDate: DateTime(1900),
          lastDate: DateTime.now(),
          builder: (context, child) {
            return Theme(
              data: Theme.of(context).copyWith(
                colorScheme: const ColorScheme.light(
                  primary: buttons_blue,
                  onPrimary: Colors.white,
                  onSurface: Colors.black,
                ),
              ),
              child: child!,
            );
          },
        );
        if (picked != null) {
          controller.text = picked.toString().split(' ')[0];
          onChanged(picked);
        }
      },
    );
  }
}
